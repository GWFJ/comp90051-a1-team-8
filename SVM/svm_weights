##Choosing weights for majority_minority classes

def svm_weight_gridsearh(model, X, y):

  model = SVC(gamma='scale')

  # define grid of weights for both minority and majority classes: (choosing weights reference: https://machinelearningmastery.com/cost-sensitive-svm-for-imbalanced-classification/ )

  balance = [{0:100,1:1}, {0:10,1:1}, {0:1,1:1}, {0:1,1:10}, {0:1,1:100}]
  param_grid = dict(class_weight=balance)

  # define evaluation procedure
  cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)

  # define grid search
  grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=cv, scoring='roc_auc')

  # execute the grid search
  grid_result = grid.fit(X, y)

  # report the best configuration
  print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))

  # report all configurations
  means = grid_result.cv_results_['mean_test_score']
  stds = grid_result.cv_results_['std_test_score']
  params = grid_result.cv_results_['params']
  for mean, stdev, param in zip(means, stds, params):
    print("%f (%f) with: %r" % (mean, stdev, param))

  return means, stds, params
